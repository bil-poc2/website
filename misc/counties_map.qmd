---
title: "POC2 potential counties"
date: "`r Sys.Date()`"
format: 
  html:
    embed-resources: true
---

```{r setup, include=FALSE}
pacman::p_load(dplyr, sf, purrr, ggplot2, cowplot, knitr)
```


```{r}
# load spatial data: w11_st = western 11 state boundaries; wcs_pl = western 11
# wcs landscapes; w11_cnty = western 11 counties

load('cnty_spatial_data.Rdata')

poc2_wcs <- c('Central Oregon',
              'Central Washington Initiative',
              'Colorado Front Range',
              'Southwest Idaho')

# function for defining adjacency
st_queen <- function(a, b = a) st_relate(a, b, pattern = "F***T****")

wcs_pl <- wcs_pl |> mutate(POC2 = ifelse(Name %in% poc2_wcs, 1, 0))

# function for finding counties that intersect with given input list
find_intersecting_counties <- function(cnty_lst){
  
  wcs_cnty_list <- cnty_lst |>
    st_join(w11_cnty) |> 
    st_drop_geometry()

  cnty_int <- w11_cnty |> 
    filter(geoid %in% unique(wcs_cnty_list$geoid)) |> 
    select(geoid, name2, state)
  
  x <- cnty_int |> 
    st_queen(w11_cnty) |> 
    unlist() |> 
    unique() |> 
    sort()
  
  cnty_adj <- w11_cnty[x,] |> 
    select(geoid, name2, state)
  
  # return 2 item list: (1) intersecting counties, (2) adjacent counties
  return(list(cnty_int, cnty_adj))
}

# counties that intersect with POC2 landscapes
tier1 <- wcs_pl |>
  filter(Year == 2022 & POC2 == 1) |>
  find_intersecting_counties()

# remaining counties that intersect with WCS YR1 landscapes
tier2 <- wcs_pl |>
  filter(Year == 2022 & POC2 == 0) |>
  find_intersecting_counties()

# counties that intersect with WCS YR2 landscapes
tier3 <- wcs_pl |>
  filter(Year == 2023 & POC2 == 0) |>
  find_intersecting_counties()

# combine tiered lists together
tier123 <- bind_rows(
  tier1 |> pluck(1) |> mutate(group = 'POC2 Intersect'),
  tier1 |> pluck(2) |> mutate(group = 'POC2 Adjacent'),
  tier2 |> pluck(1) |> mutate(group = 'WCS1 Intersect'),
  tier2 |> pluck(2) |> mutate(group = 'WCS1 Adjacent'),
  tier3 |> pluck(1) |> mutate(group = 'WCS2 Intersect'),
  tier3 |> pluck(2) |> mutate(group = 'WCS2 Adjacent')
) 

# remove duplicate counties
tier123 <- tier123 |>
  st_drop_geometry() |>
  group_by(geoid) |>
  slice_head(n = 1)

```

Below is a map of counties the intersect or are adjacent to intersected counties that we are considering evaluating as part of POC2. I've organized the counties into 3 tiers each with 2 groups. Tier 1 is our primary focus; Tier 2 is our secondary focus; Tier 3 is are stretch goal. In each Tier, group `_1` contains counties that intersect the WCS priority landscapes, group `_2` contains counties that are adjacent to those counties. 

```{r}
# join tiered county list to the county spatial data
w11_cnty2 <- w11_cnty |> 
  left_join(tier123)

ggplot(w11_cnty2) + 
  geom_sf(aes(fill=group)) +
  geom_sf(data = wcs_pl, fill=NA, color='black') +
  theme_map()
```

Below is the list of counties intersecting (n=38) or adjacent (n=64) to the 4 priority landscapes which are the primary focus of the POC2.

```{r}
tier123_1 <- tier123 |> 
  filter(group %in% c('POC2 Intersect','POC2 Adjacent'))
table(tier123_1$group)
tier123_1 |> arrange(group) |> kable()
```

Next is the list of counties intersecting (n=24) or adjacent (n=51) to the 6 additional priority landscapes identified in the roll out of the Wildfire Crisis Strategy (WCS).

```{r}
tier123_2 <- tier123 |> 
  filter(group %in% c('WCS1 Intersect','WCS1 Adjacent'))
table(tier123_2$group)
tier123_2 |> arrange(group) |> kable()
```

Finally, here is the list of counties intersecting (n=36) or adjacent (n=40) to the 11 priority landscapes identified in phase 2 of the WCS. 
```{r}
tier123_3 <- tier123 |> 
  filter(group %in% c('WCS2 Intersect','WCS2 Adjacent'))
table(tier123_3$group)
tier123_3 |> arrange(group) |> kable()
```
